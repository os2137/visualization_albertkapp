---
title: "best-vis-tips-albertrapp"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## [twitter link](https://twitter.com/rappa753/status/1629873975923974144)

# [**STOP Wasting Space on HUGE LEGENDS \| A ggplot2 step-by-step guide**](https://www.youtube.com/watch?v=X1gkw--k5Tg&list=PLBnFxG6owe1EzWjq_rOfdWcWP8QBxcm58)

```{r}
library(tidyverse)
library(palmerpenguins)
library(ragg)
```

```{r}
palmerpenguins::penguins |> 
  filter(!is.na(sex)) 
  colors <- c("#E69F00",  "#009E73", "#007282" )
  
  names(colors) <- unique(palmerpenguins::penguins$species)
  colors
  symbols <- c('square', 'circle', 'star')
  names(symbols) <- unique(penguins$species)
```

```{r}
title_text= glue::glue(
'Penguin weights (in g) for the Species ',

'<span style = "color:{colors["Adelie"]}">**Adelie**</span>, ',

'<span style = "color:{colors["Chinstrap"]}">**Chinstrap**</span> ',

' and ' ,

'<span style = "color:{colors["Gentoo"]}">**Gentoo**</span>,',

)
```

```{r}
title_text= glue::glue(
'Penguin weights (in g) for the Species ',

'<span style = "color:{colors["Adelie"]}">',

'**Adelie**',

' (','<span style = "font-family: \'Font Awesome 6 Free Solid\'; font-size:20px;">{symbols["Adelie"]}</span>',

')',

'</span>, ',





'<span style = "color:{colors["Chinstrap"]}">',

'**Chinstrap**',

' (','<span style = "font-family: \'Font Awesome 6 Free Solid\'; font-size:20px;"> {symbols["Chinstrap"]}</span>',

')',

'</span>, ',



' and ' ,




'<span style = "color:{colors["Gentoo"]}">',

'**Gentoo**',

' (','<span style = "font-family: \'Font Awesome 6 Free Solid\'; font-size:20px;"> {symbols["Gentoo"]}</span>',

')',

'</span>, '

)
```

```{r}
penguins |> 
  mutate(symbol = symbols[as.character(species)]) |> 
  ggplot(aes(x = bill_length_mm, y = body_mass_g, fill = species)) + 
  geom_point(shape = 21, size = 5, alpha = 0.85, color = 'grey10') + 
  theme_minimal(base_size = 16, base_family = "Source Sans Pro") + 
  scale_fill_manual(values = colors) + 
  labs(
    x = "Bill length (in mm)", 
    y = element_blank(), 
    title = "Penguins from the Palmer Archipelago", 
    subtitle = title_text
  ) + 
  theme(
    plot.subtitle = ggtext::element_markdown(size = 18, lineheight = 1.3), 
    plot.title.position = 'plot', 
    text = element_text(color = "grey20"), 
    axis.text = element_text(color = 'grey30'), 
    plot.title = element_text(
      family = "Merriweather", size = 26, margin = margin(b = 7, unit = 'mm')), 
    panel.background = element_rect( color = 'grey90'), 
    panel.grid.major = element_line(color = 'grey90'), 
    panel.grid.minor = element_blank(), 
    legend.position = 'none'
    
  )
```

```{r}
penguins |> 
  mutate(symbol = symbols[as.character(species)]) |> 
  select(species, symbol) |> 
  unique()
```

## Finding the font names from you system

LINK TO FONTAWESOME SEARCH PAGE [https://fontawesome.com/search](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbldiVTlQV3NfeUtIOWdHUHBiR19BTWg2dGRnd3xBQ3Jtc0tsVndEb1c2TkIxTmdYQ0lhQl9uZXh2NkJxWWhuR3VOWUF2QXY4djVPdVJBUGNDWVh4Q0hjMGFRTE5mbE9fNGk2ckJIaUtRRWVnV3hHZWFfRnJ1Y0VTcV84WmM3MGxqbldzcUN4M0o1ZGt2eHV5dzdhWQ&q=https%3A%2F%2Ffontawesome.com%2Fsearch&v=X1gkw--k5Tg)

LINK TO FONTAWESOME DOWNLOADS [https://fontawesome.com/download](https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbEd6N0dyMXF0NklxX0JKRHE1UEZkNXl0dkJad3xBQ3Jtc0ttMUJ4SlZqWnZDN3Y1M1RubVV3WUdYMXpMYWhiUmFvSUdUTHJCN2ZTdDAzSDIzRHhheVA1NWlIbjBKZmhQc0hIeWZ5Q05nRGZjLTJac0VGcDZ4WGxjMUxoTERDZnBSWHNLMUxqM2dEREdmM0Q0WFI2QQ&q=https%3A%2F%2Ffontawesome.com%2Fdownload&v=X1gkw--k5Tg)

```{r}
systemfonts::system_fonts() |>    filter(str_detect(family, 'Awesome')) |>    select(name, family, style)
```

```{r}
systemfonts::system_fonts() |>    filter(str_detect(family, 'Awesome'), style == 'Solid') |>    pull(path) |>    systemfonts::register_font(  'Font Awesome 6 Free Solid',   plain = _ )

```

```{r}
penguins |> 
  mutate(symbol = symbols[as.character(species)]) |> 
  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) + 
  geom_text(aes(label = symbol), 
            family = 'Font Awesome 6 Free Solid', 
            size = 4, 
            alpha = 0.75) + 
  theme_minimal(base_size = 16, base_family = "Source Sans Pro") + 
  scale_color_manual(values = colors) + 
  labs(
    x = "Bill length (in mm)", 
    y = element_blank(), 
    title = "Penguins from the Palmer Archipelago", 
    subtitle = title_text
  ) + 
  theme(
    plot.subtitle = ggtext::element_markdown(size = 18, lineheight = 1.3), 
    plot.title.position = 'plot', 
    text = element_text(color = "grey20"), 
    axis.text = element_text(color = 'grey30'), 
    plot.title = element_text(
      family = "Merriweather", size = 26, margin = margin(b = 7, unit = 'mm')), 
    panel.background = element_rect( color = 'grey90'), 
    panel.grid.major = element_line(color = 'grey90'), 
    panel.grid.minor = element_blank(), 
    legend.position = 'none'
    
  )
```

# [**Good Data Visualizations Don't Take Much Time**](https://www.youtube.com/watch?v=U8CrTL2kIDA&t=199s)

```{r}
library(tidyverse)
popular_names <- babynames::babynames |> 
  filter(year == 2017) |> 
  slice_max(prop, n = 3, by = sex) |> 
  pull(name)
set.seed(4534)
fake_data <- tibble(
  name = popular_names,
  proj_lower = runif(length(name)),
  proj_upper = proj_lower + rnorm(length(name), mean = 0.2, sd = 0.1),
  actual = rnorm(length(name), mean = (proj_lower + proj_upper) / 2, sd = 0.2)
) |> 
  mutate(
    across(proj_lower:actual, \(x) x * 10000)
  )
```

```{r}
fake_data |> 
  ggplot() +
  geom_segment(
    aes(
      x = proj_lower, xend = proj_upper,
      y = name, yend = name
    ),
    linewidth = 6,
    lineend = 'round',
    color = 'grey20'
  ) +
  geom_point(
    aes(x = actual, y = name),
    size = 7,
    shape = 21,
    fill = 'dodgerblue',
    stroke = 2
  )
```

```{r}
fake_data |> 
  mutate(name = fct_reorder(name, actual)) |> 
  ggplot() +
  geom_segment(
    aes(
      x = proj_lower, xend = proj_upper,
      y = name, yend = name
    ),
    linewidth = 6,
    lineend = 'round',
    color = 'grey80'
  ) +
  geom_point(
    aes(x = actual, y = name),
    size = 7,
    shape = 21,
    fill = 'dodgerblue',
    stroke = 2
  ) +
  theme_minimal(base_size = 18, base_family = 'Source Sans Pro') +
  labs(
    title = 'Most People Did Not Reach Their Projected Annual Sales Goal',
    x = 'Yearly Sales (in USD)',
    y = element_blank(),
    caption = 'Data from annual sales report. Find more information there.'
  )
```

Add a color highlight

```{r}
fake_data |> 
  mutate(
    name = fct_reorder(name, actual),
    outside_projection = !between(actual, proj_lower, proj_upper),
    point_color = if_else(outside_projection, '#CC79A7', 'grey40'),
    line_color = if_else(outside_projection, alpha('#CC79A7', 0.7), 'grey80')
  ) |> 
  ggplot() +
  geom_segment(
    aes(
      x = proj_lower, xend = proj_upper,
      y = name, yend = name,
      color = line_color
    ),
    linewidth = 6,
    lineend = 'round'
  ) +
  geom_point(
    aes(x = actual, y = name, fill = point_color),
    size = 7,
    shape = 21,
    stroke = 2
  ) +
  theme_minimal(base_size = 18, base_family = 'Source Sans Pro') +
  labs(
    title = 'Most People Did Not Reach Their Projected Annual Sales Goal',
    x = 'Yearly Sales (in USD)',
    y = element_blank(),
    caption = 'Data from annual sales report. Find more information there.'
  ) +
  scale_color_identity() +
  scale_fill_identity()
```

# [**Learn the BEST Chart to Compare Anything**](https://www.youtube.com/watch?v=sVcNa9maIjY)

```{r}
library(tidyverse)
set.seed(345004)
selected_countries <- gapminder::gapminder |> 
  janitor::clean_names() |> 
  filter(
    year %in% c(1952, 2007),
    country %in% c(sample(levels(gapminder::gapminder$country), 25), 'Zimbabwe')
  ) |> 
  mutate(year = factor(year)) |> 
  select(country, year, life_exp)
```

```{r}
sorted_countries <- selected_countries |> 
  arrange(country, year) |> 
  mutate(
    change_life_exp = diff(life_exp), 
    order_dumbbells = if_else(change_life_exp < 0, -1, 1) * life_exp[2],
    .by = country
  ) |> 
  mutate(country = fct_reorder(country, order_dumbbells))
sorted_countries |> 
  ggplot(aes(x = life_exp, y = country)) +
  geom_path(
    aes(color = (change_life_exp < 0)),
    linewidth = 1,
    arrow = arrow(length = unit(0.3, 'cm'), type = 'closed')
  ) +
  # geom_point(
  #   aes(fill = year), 
  #   shape = 21, 
  #   size = 5, 
  #   color = '#333333', 
  #   stroke = 1
  # ) +
  theme_minimal(base_size = 16, base_family = 'Source Sans Pro') +
  labs(
    title = 'Zimbabwe Actually Decreased Its Life Expectancy in the Last 55 Years',
    x = 'Life expectancy (in years)', 
    y = element_blank(),
    fill = 'Year'
  ) +
  theme(
    panel.grid.major.y = element_blank(),
    panel.grid.minor.x = element_blank(),
    legend.position = 'none'
  )
```

# [**Create Parts-of-a-Whole Bar Charts with R**](https://www.youtube.com/watch?v=tUbNhbkWNac&t=8s)

```{r}
questions <- tribble(
  ~question,     ~yes_rate, 
  'Should we have more chocolate?', 0.83, 
  'Do penguins have knees?', 0.25, 
  'Would you enjoy being a dog', 0.6
  
)
```

```{r}
questions |>
  mutate(question = fct_reorder(question, yes_rate)) |> 
  ggplot(aes(y = question, x = yes_rate)) +
  geom_col(fill = 'purple') +
  labs(
    x = element_blank(), 
    y = element_blank(), 
    title = "How many people say 'Yes' to these questions?"
  ) + 
  theme_minimal(base_size = 20, base_family = "Source Sans Pro") + 
  theme(
    plot.title.position = 'plot', 
    panel.grid.minor = element_blank(), 
    panel.grid.major.y = element_blank()
  ) + 
  scale_x_continuous(labels = scales::percent_format())
```

```{r}
complementary_rates <- questions |> 
  mutate(no_rate = 1 - yes_rate, 
         question = fct_reorder(question, yes_rate))|> 
  pivot_longer(
    -question, 
    names_to = 'answer', 
    names_pattern = '(.+)_rate',
    values_to = 'percentage'
  )
```

```{r}
complementary_rates |> 
  ggplot(aes(y = question, x = percentage, fill = answer)) +
  geom_col() +
  geom_vline(xintercept = 0.5, color = 'grey20', linetype = 2) +
  labs(
    x = element_blank(), 
    y = element_blank(), 
    title = "How many people say 'Yes' to these questions?"
  ) + 
  theme_minimal(base_size = 20, base_family = "Source Sans Pro") + 
  theme(
    plot.title.position = 'plot', 
    panel.grid.minor = element_blank(), 
    panel.grid.major.y = element_blank(), 
    legend.position = 'none'
  ) + 
  scale_x_continuous(labels = scales::percent_format()) + 
  scale_fill_manual(
    values = c('yes' = 'dodgerblue4', 'no' = 'grey80')
  )
```
